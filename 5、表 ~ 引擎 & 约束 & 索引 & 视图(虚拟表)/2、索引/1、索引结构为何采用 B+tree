MySQL的索引在构建时为何选择 B+tree ?
参见：https://xiaolincoding.com/mysql/index/why_index_chose_bpuls_tree.html#%E6%80%8E%E6%A0%B7%E7%9A%84%E7%B4%A2%E5%BC%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%98%AF%E5%A5%BD%E7%9A%84

建立索引结构，是为了快速查找，对磁盘的I/O越少就越快；---------------------------------------------------------------------------
另外，索引结构还需要很好地支持范围查找。为何B+树可以做到？

数组：
        一个数组中有若干个大小不一的数，现在要提供一个专门用于寻找目标值的功能，为了尽快找到目标数据，一个好的办法是先对数组元素排序，
     然后用二分法查找！
         但是，如果有新的元素加入进数组，为了将新元素摆放在合适的连续位置，常常需要对整个数组重新构建，这在磁盘中会导致速度致命地低。
二叉树：
        将上述数组中的元素，按照左小右大，放进一个二叉树里，则很好的解决了有新元素加入时需要在磁盘中重组整个结构的致命低速问题，而且
     由于元素之间通过指针形成逻辑上的联系，因此并不需要磁盘提供连续的空间。
        但是，如果新元素总是比之前的元素都要更大，则会导致二叉树成为一个“瘸子”，即二叉树的右边很大而左边没有变化。
        而且，二叉树因为每个节点最多只有两个子节点，因此元素越多，二叉树越高，一个节点I/O一次磁盘，当元素很多即二叉树很高时，为了
     找到目标元素，磁盘I/O依然很恐怖。

B树（自平衡多叉树）：
        在二叉查找树的基础上让每个节点的左子树和右子树的高度差不能超过1，同时不再限制每个节点只能有2个子节点。这样就解决了“瘸子”问题
     和树太高的问题。
        但如果用来构建聚簇索引，扫描B树读入内存来查找某个节点的数据时，由于每个节点存放索引数据和行数据，远超过单纯的索引的大小，因此
     会导致从B树中读入的非目标数据过多，影响效率。
        而且，也很不利于范围查询。
        删除某个节点时，B树的结构调整也会比较复杂。

B+树：
        父节点中存放了儿节点中索引的最小（或最大）值。
        每个父节点有多少个儿节点，则每个节点中就有多少个索引。
        叶节点（最底部的节点）才会存放实际数据（索引+一行数据），非叶节点只会存放索引；
        所有索引都会在叶节点出现，叶节点之间构成一个有序双向链表，非常利于范围查询；



B+Tree 相比于 B 树、二叉树或 Hash 索引结构的优势在哪儿？----------------------------------------------------------------------
1、B+Tree -- B Tree
    B+Tree 只在叶子节点存储数据，而 B 树 的非叶子节点也要存储数据，所以 B+Tree 的单个节点的数据量更小，在相同的磁盘 I/O 次数下，就能查
询更多的节点。
    另外，B+Tree 叶子节点采用的是双链表连接，适合 MySQL 中常见的基于范围的顺序查找，而 B 树无法做到这一点。

2、B+Tree -- 二叉树
    对于有 N 个叶子节点的 B+Tree，其搜索复杂度为O(logdN)，其中 d 表示节点允许的最大子节点个数为 d 个。在实际的应用当中， d 值是大
于100的，这样就保证了，即使数据达到千万级别时，B+Tree 的高度依然维持在 3~4 层左右，也就是说一次数据查询操作只需要做 3~4 次的磁盘 I/O
操作就能查询到目标数据。
    而二叉树的每个父节点的儿子节点个数只能是 2 个，意味着其搜索复杂度为 O(logN)，这已经比 B+Tree 高出不少，因此二叉树检索到目标数据所
经历的磁盘 I/O 次数要更多。

3、B+Tree -- Hash
    Hash 在做等值查询的时候效率贼快，搜索复杂度为 O(1)。但是 Hash 表不适合做范围查询，它更适合做等值的查询，这也是 B+Tree 索引要
比 Hash 表索引有着更广泛的适用场景的原因。

（完）