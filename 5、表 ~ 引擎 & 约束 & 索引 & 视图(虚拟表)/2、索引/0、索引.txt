可以参见：https://www.php.cn/mysql-tutorials-369217.html

1、什么是索引：
    也即KEY（又叫INDEX），是将数据表中已有、新插入进表的数据中的一列或多列的值复制出来进行排序的结构，该结构单独地存储在数据表之外的地方。
    创建索引是为了提高MySQL的查询速度。

1.1、索引结构
    分为B树（BTREE）索引和哈希（HASH）索引，其中B树索引（BTREE）为MySQL默认的索引结构。
    B树索引：
        索引存储的值按数据表中索引列的值的顺序排列，使用时通过在索引中查找，来定位要查的数据在数据表中的行号。
        todo:如果查询的字段都位于索引中，则不需要到数据表中读取相应的那一行，因此多列索引（即复合索引）是有用途的！
        todo:另外当一条查询sql中用到了多列索引中的首列和其他列，例如SELECT * FROM tab WHERE num=10 AND info=xx 其中num和info两列
             一起建立索引，则多列索引的首列num先发挥作用，在其限定范围内多列索引的非首列info发挥作用，双重限制从而更快地找到目标数据，比
             单列索引更快！     ！！！！！错错错！！！！！！
    Hash索引：
        哈希索引通过哈希函数计算索引列每个值的哈希值，再放入索引中。使用时通过和索引比对哈希值，从而定位到要查数据在数据表中的行号。因此
        哈希索引的大小和索引列的数据类型无关，一个TINYINT列的索引与一个长字符串列的索引一样大。
        由于哈希索引的计算方式，因此使用哈希索引排序、使用哈希索引进行WHERE不等式比较的筛选、使用哈希索引进行模糊匹配查询，哈希索引都无
        法真正发挥出索引的效果。

1.2、索引的大小
    不同类型的表（存储引擎不同），一张表里的索引个数是有限的，一般是16个；一张表里全部索引加起来的总长度，一般是256字节。

2、索引的优缺点
2.1、索引的优点———索引能提高查询效率的原因：
    一般的查询，MySQL是通过逐行扫描全表，找到符合查询语句的一或多行数据，来实现的。查询语句的WHERE条件中涉及索引列时，则会先查询索引，来迅速
    找到数据表中的一行或多行数据，因此查询速度更快。

2.2、索引的缺点———索引会拖慢增改删数据效率的原因：
    a、对已有数据的表创建索引需要耗费时间，耗时与数据量成正比；新插入到表中的数据的相应的列被维护到索引中也需耗时；但前者耗时小于后者耗时。
          【todo:因此，大量插入数据时，可以先将表中的索引删除，大量数据插入完后，再重新创建索引。
            向已有数据的表中新增索引，MySQL会自动将表中的数据维护到索引中，从而新增的索引会生效！】
    b、索引结构本身也要占据磁盘空间，数据表中的数据越大，相应的索引结构占据的空间也越大。
    c、会降低表的增改删的效率，因为每次增改删索引，B+ 树为了维护索引结构的有序性，都需要进行动态维护。

#什么时候适用索引？
    字段值的区分度高，比如是唯一性字段，比如商品编码；
    经常用于 WHERE 查询条件的字段，这样能够提高整个表的查询速度，如果查询条件不是一个字段，可以建立联合索引。
    经常用于 GROUP BY 和 ORDER BY 的字段，这样在查询的时候就不需要再去做一次排序了（额外的排序会引发file sort，很耗时），
    因为我们都已经知道了建立索引之后在 B+Tree 中的记录都是排序好的，因为建立索引结构时，索引值只有排序后才能去建立索引结构。
#什么时候不需要创建索引？
    WHERE 条件，GROUP BY，ORDER BY 里用不到的字段，索引的价值是快速定位，如果起不到定位的字段通常是不需要创建索引的，因为索引是会占用物理空间的。
    字段中存在大量重复数据，不需要创建索引，比如性别字段，只有男女，如果数据库表中，男女的记录分布均匀，那么无论搜索哪个值都可能得到一半的数据。在
    这些情况下，还不如不要索引，因为 MySQL 还有一个查询优化器，查询优化器发现某个值出现在表的数据行中的百分比很高的时候，它一般会忽略索引，进行全
    表扫描。
    表数据太少的时候，不需要创建索引；
    经常更新的字段不用创建索引，比如不要对电商项目的用户余额建立索引，因为索引字段频繁修改，由于要维护 B+Tree的有序性，那么就需要频繁的重建索引，
    这个过程是会影响数据库性能的


3、索引
3.1、MySQL中所有的数据类型的列，都可以被建立索引。

3.2、MySQL中有如下这些索引：
    普通索引：即KEY，表中任何列都可创建普通索引。被创建普通索引的一列或多列组合，列的值并不要求是非null或不重复，普通索引和非null不重复无关。
    唯一索引：创建主键PRIMARY KEY（主键是一种特殊的UNIQUE KEY） 和 唯一键UNIQUE KEY 时所连带创建的索引。
    多列索引：数据表中多个列的组合，作为一个整体创建的索引，也叫复合索引。
            todo（查询语句可以通过这几个列查询，但若想该索引发挥作用，查询语句中必须使用上该多列索引在被定义时括号内的第一个列！参见上述B树
                 索引的说明。
            todo:另外当一条查询sql中用到了多列索引中的首列和其他列，例如SELECT * FROM tab WHERE num>10 AND info=xx 其中num和info
                 两列一起建立索引，则多列索引的首列num先发挥作用，在其限定范围内多列索引的非首列info发挥作用，双重限制从而更快地找到目标
                 数据，比单列索引更快！   ！！！！！错！！！！！
            todo: 如果索引字段为A+B，查询A+C时，会使用A索引吗->会！！！！！参见 1、建表时创建索引.txt 中的69行的示例）
            todo:如果要查的字段，多列索引中都有，则可以避免回表，减少了I/O磁盘，速度更快。

    全文索引：即 FULLTEXT KEY，只有存储引擎是MyISAM的类型的表、数据类型为char、varchar、text的列，才能创建全文索引。（默认大小写不敏感，
            除非建立索引的列使用二进制排序？？）
    空间索引：即 SPATIAL KEY，只有存储引擎是MyISAM的类型的表、数据类型为空间类型如geometry、point、linestring、polygon的列，才能创建
            空间索引，且要求该列的值都是非null的。

（完）