    锁的存在，是为了和MVCC一起应对多事务（含隐形事务）并发使用MySQL的InnoDB引擎数据表，实现事务的“隔离性”即ADIC四大特性中的I。

    自带加锁属性的那些crud语句（存在于事务中，包括隐形事务）在操作数据表时，它们的读、写就直接穿透了MVCC的快照性，直接对数据表当下的
数据进行操作！不过由于这些自带加锁属性的crud语句在对相应区域读、写之前，自动对相应的区域加了锁，所以尽管其他事务里也有那些自带加锁属性
的crud语句会穿透MVCC的快照性，在相应区域加锁后直接对数据表相应位置的当下数据进行操作，但这种前后加锁之间、共享锁独占锁的兼容规则保证
了它们事务之间不会竞争打架！【已经验证！】从而实现了事务的“隔离性”。



    锁一定是在事务（含隐形事务）提交时才释放的！！！



（完）