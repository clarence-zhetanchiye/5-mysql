crud加的是共享型锁、还是独占型锁：

        执行简单的select读操作，并不会也不需要加锁！
                简单的SELECT语句是不会也不需要加锁的，它是利用MVCC中对事务的READ-VIEW快照实现的快照读（从而实现一致性读）。

        执行读操作只能这样对数据表中的某些行的索引上自动加上锁，来锁住相应的行：
                select ... lock in share mode;//会自动（先在表上加上意向共享锁）对读取的相应行的相应索引加共享型锁，来锁住相应的行。
                select ... for update;        //会自动（先在表上加上意向独占锁）对读取的相应行的相应索引加独占型锁，来锁住相应的行。
                todo:由于事务（含隐形事务）一提交，上述select加的行级锁就会释放，因此在使用时上述加锁的select语句通常用在手动事务中，
                     这样在手动事务期间，相应的行都是被加锁的，事务内、在上述select语句之后对相应行进行 插入、更新、删除 操作时，相
                     应的行在整个事务中都是不会被其他事务改变的，因为其他事务要删改相应的行需要先加上独占锁，但和相应行上的锁不兼容
                     而被阻塞！

        执行insert、update、delete写操作就会自动加锁，而且加的是独占锁！



crud给什么位置加的锁：
        Record-Lock行锁、Gap-Lock间隙锁、Next-Key Lock 临键锁，就其名称而言均无是否兼容的判断价值，都并不是一个什么特别的锁，而只是
        在描述锁住的位置。只有看具体的crud语句，才能确定加的是共享锁还是独占锁，而只有确定了是共享锁还是独占锁，才具有判断是否兼容的价值。
        （当然，共享锁、独占锁之间的兼容互斥，还是受到行级锁所锁住的范围的影响的，间隙锁就会让共享锁S、独占锁X的兼容互斥关系发生变化，详
        见相应文件中的说明）



crud是在索引上加锁：
            insert、update、delete、select...for update、select...lock in share mode 这几个crud语句（存在于隐形事务中）会自动
        在相应的位置（相应的行和间隙）加上行级锁（也即所谓的 Next-Key Lock 临键锁），然后视情况自动决定是否退化为只对相应的行加锁（也即
        所谓的Record-Lock行锁）或只对相应的间隙加锁（也即所谓的Gap-Lock间隙锁）;决定的根据是，在能使用 Record-Lock行锁 或者 Gap-Lock
        间隙锁就可避免幻读现象的场景下，Next-Key Lock 就会退化成 Record-Lock行锁或 Gap-Lock间隙锁。
            （当然是会先自动对数据表加上「意向独占锁」的，不过开发者一般无须特别关注这一点，除非要加表锁、判断是否兼容时）
            锁都是加在上述crud语句中使用到的索引上（而非加在数据页中的一整行上，除非是加在聚簇索引树的索引值上，则相当于锁住了数据页上
        相应的一行），由于索引都是排序了的（创建索引时，不指定排序就默认建成的索引树是升序），所以在索引树上加锁，只需要锁定一个较小的范
        围，就可以确保期间别的事务无法向该范围写入、或修改别的索引值导致被排序到这个范围里来，来让当前事务出现幻读。
            但，若上述crud未使用到索引，则crud语句只能全表扫描，为了避免期间别的事务update、delete、insert数据导致当前事务的这条crud
        出现幻读，于是被扫描的表的全部行、也即整张表上的各个索引都会被加上行级锁（也即所谓的Next-Key Lock 临键锁）！等同于全表被锁！
                    举例说明：
                        数据表中name这个字段未建立索引，现在事务a的一条crud语句是 select * from tab_name where name=xx for update；
                        这条sql只好全表扫描寻找name=xx的那些行，期间如果事务b新增一行name=xx的、或更改某一行让name=xx、或删除掉
                        name=xx的那一行，则对事务a来说就出现了幻读，为了避免幻读，事务a中的这条sql只好对扫描过的每一行都加锁。
                    再例说明：
                        数据表中name这个字段未建立索引，现在事务a的一条crud语句是 delete from tab_name where name=xx； 这条sql
                        只好全表扫描寻找name=xx的那些行，期间如果期间如果事务b新增一行name=xx的、或更改某一行让name=xx、或删除掉
                        name=xx的那一行，则对事务a来说就出现了幻读，为了避免幻读，事务a中的这条sql只好对扫描过的每一行都加锁。
            这会导致其他事务对该表的写操作都被阻塞，一旦当前事务比较大需要较长时间才提交，那么会有大量事务（含隐形事务）被阻塞，问题很严重！
            因此，insert、update、delete、select...for update、select...lock in share mode 自动加行级锁的crud语句，其中的where
        条件一定要走索引！！




（完）