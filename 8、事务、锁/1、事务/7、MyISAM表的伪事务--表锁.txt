MySQL的MyISAM表不支持事务，用户对这种类型表的每一次写操作（写操作包括 增、改、删），都会立即被保存在数据表所在的磁盘中。
为了避免多个用户会话在同一时间对数据库的同一个表进行操作，用户会话可以使用表锁来实现类似事务的功能，这种表锁实现的叫伪事务。
注意，MyISAM引擎不支持行锁。

todo:√
 共享锁：一个会话a对某个区域加的锁若属于共享锁，则在a会话持有该锁期间，另一个会话b也可以获得该锁。
        对被锁的区域，a会话和b会话之间，读读共享、读写互斥。
 独占锁：一个会话a对某个区域加的锁若属于独占锁，则在a会话持有该锁期间，另一个会话b无法获得该锁。
        对被锁的区域，a会话和b会话之间，读写互斥、写写互斥。
 共享锁 & 独占锁 ：对相同区域，已经加了共享锁的还可以再加共享锁，但不能再加独占锁；
                 对相同区域，已经加了独占锁的，不能再加共享锁，也不能再加独占锁。
             即：只有共享锁与共享锁是兼容的，共享锁与独占锁、独占锁与独占锁都是不兼容的。

几种表锁的总体使用语法：
    LOCK TABLES table_name1 lock_type1, table_name2 lock_type2, ... ;    //lock_type可以是 READ, READ LOCAL, WRITE 。
    ...
    UNLOCK TABLES;


使用READ锁（todo:READ锁是一种共享锁，被READ锁锁定的区域，当前会话可以读，其他会话也可以读，但都不能写，写包括增改删）：
    LOCK TABLES table_name READ; //当前会话就只能读表了，对table_name表的插入、更新、删除将报错。 |||  其他会话可以读表，写表则被阻塞。
    ......                      //只可以是一到多条SELECT语句。
    UNLOCK TABLES;              //当前会话就可以恢复对table_name表进行crud操作了。  |||  其他会话阻塞的操作就被执行了，也可以继续crud了

使用READ LOCAL锁：
    LOCK TABLES table_name READ LOCAL;//当前会话可查询和插入table_name表，对table_name表的更新、删除将报错。
    ......                            //可以是一到多条SELECT或INSERT语句。
    UNLOCK TABLES;

使用WRITE锁（todo:WRITE锁是一种独占锁，被WRITE锁锁定的区域，只能当前会话读和写，其他会话不能读也不能写，写包括增改删）：
    LOCK TABLES table_name WRITE; //当前会话可以对table_name表进行crud操作。    |||   其他会话对该表crud都会被阻塞。
    ......                        //可以进行crud各种操作。
    UNLOCK TABLES;                //当前会话继续可以crud。       |||     其他会话阻塞的操作就被执行了，也可以继续crud了。



表锁一览表
（一个会话是指新开一个操作MySQL的CMD窗口，即新建一个和MySQL的连接）：
--------------------------------------------------------------------------------------------------------------|
|            当前会话                                                其他会话                                    |
|-------------------------------------------------------------------------------------------------------------|
|读锁      只能读，写则报错。               只能读，若是写则会阻塞；直到“当前会话”解锁，被阻塞的写被执行，后续也可无障碍读写   |
|                                                                                                             |
|写锁      可以读、写。                    读、写都被阻塞；直到“当前会话”解锁，被阻塞读写被执行，后续也可无障碍读写。        |
--------------------------------------------------------------------------------------------------------------|

（完）