============================================事务并发会引发的情形==========================================================
MySQL中多个事务可以并发执行，但事务并发
时若无隔离级别加以控制，则会引发下列后果：

脏读：一个事务内，读到了其他事务未提交的数据，这样若其他事务后来回滚，则当前事务读到的是一个无效数据。（期间别的事务还未提交）

不可重读：一个事务内，先后读同一个地方的数据，出现读取到的数据不一致的情况，则不知道该以哪次读到的数据为准。（因为期间别的已提交事务更改了数据）

幻读：一个事务内，先后读相同筛选条件的数据，出现读取到的记录条数不一致的情况。（因为期间别的已提交事务添加或删除了数据）

上述三种情况，严重程度为: 脏读 > 不可重读 > 幻读

========================================解决事务并发问题，数据库规范了四种隔离级别===========================================
MySQL事务有四种隔离级别（也成为孤立级。todo:默认的孤立级是标星号的可重读）：
    READ UNCOMMITTED（读未提交）：······························································【会引发 脏读、不可重读、幻读】
                                当前事务能看到别的正在执行的事务对数据库数据的影响，尽管别的事务还未COMMIT
    READ COMMITTED（读已提交）：  ······························································【会引发 不可重读、幻读】
                                当前事务在执行过程中，若同时有其他事务对数据库进行操作并COMMIT了，则当前
                                事务能读到数据库数据在此期间发生的前后变化，即不可重读，重复读两次结果不同。
  * REPEATABLE READ（可重读）：  ······························································【会引发 幻读。但能规避绝大部分】
                                当前事务在执行过程中，即使同时有其他事务对数据库进行操作并COMMIT了，当前
                                事务眼中的数据库的数据也并未发生前后变化，即可重读，重读的结果总是一样的。
                                简单地说可重读隔离级别下，事务执行的过程中任何时候看到的数据表数据，总是和
                                该事务创建时那一刻的数据表数据是一致的！！！
    SERIALIZABLE（序列化）：     ······························································【不会引发任何问题，最安全】
                            使用读写锁，让多个事务以排队地形式被逐一地处理（多个事务你读我写、你写我读、你
                            写我写会产生互斥，效果就是排队地执行，多个事务你读我读是可以同时进行的）。这样
                            即便当前用户也无法通过SELECT语句查看到当前事务执行过程中对数据库中数据的改变，
                            只有事务COMMIT后才行。  安全性最高，性能最差。

来具体看一个例子：

 启动事务A	    启动事务B
查知余额100
	            查知余额100
	            改为余额200
查知余额V1
	            提交事务B
查知余额V2
提交事务A
查知余额V3

在不同隔离级别下，事务 A 执行过程中查询到的余额可能会不同：

「读未提交」隔离级别下：
                    事务 B 修改余额后，虽然没有提交事务，但是此时的余额已经可以被事务 A 看见了，于是事务 A 中余额 V1 查询的值是 200 万，
                    余额 V2、V3 自然也是 200 万了；
「读提交」 隔离级别下：
                    事务 B 修改余额后，因为没有提交事务，所以事务 A 中余额 V1 的值还是 100 万，等事务 B 提交完后，最新的余额数据才能被
                    事务 A 看见，因此额 V2、V3 都是 200 万；
「可重读」 隔离级别下：
                    事务 A 只能看见启动事务时的数据，所以余额 V1、余额 V2 的值都是 100 万，当事务 A 提交事务后，就能看见最新的余额数据
                    了，所以余额 V3 的值是 200 万；
「序列化」 隔离级别下：
                    事务 B 在执行将余额 100 万修改为 200 万时，由于此前事务 A 执行了读操作，这样就发生了读写冲突，于是就会被锁住，直到
                    事务 A 提交后，事务 B 才可以继续执行，所以从 A 的角度看，余额 V1、V2 的值是 100 万，余额 V3 的值是 200万。



======================================================= 查询与设置隔离级别 ================================================
查询MySQL当前的事务隔离级别：
    SELECT @@tx_isolation;

修改MySQL当前的事务隔离级级（需有super级别权限）：
    SET GLOBAL TRANSACTION ISOLATION LEVEL xx;  //xx就是事务的孤立级，就是上面那四个词组。




======================================================= 事务的性能与使用 =================================================
为了提高数据库的性能，要合理使用事务。

1、应用小事务：
    只有事务都比较小，才能保证在队列中的每个事务不会在被执行前等待太长的时间，从而避免各个事务因为互相等待而导致系统性能大幅下降。

2、选择合适的隔离级别：
    隔离级别越高，安全性越高，但性能越低。要根据业务场景合理选择。

（完）